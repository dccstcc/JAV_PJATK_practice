package permissions.db.repos;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import permissions.db.PagingInfo;
import permissions.db.UserRepository;
import permissions.domain.User;

public class HsqlUserRepository implements UserRepository{

	private Connection connection;
	
	private String insertSql ="INSERT INTO user(username,password) VALUES(?,?)"; 
	private String selectSql ="SELECT * FROM person LIMIT(?,?)";
	private String selectByIdSql ="SELECT * FROM user WHERE id=?";
	private String selectByUsernameSql ="SELECT * FROM user WHERE Username=? LIMIT(?,?)";
	private String selectByPasswordSql ="SELECT * FROM user WHERE Password=? LIMIT(?,?)";
	private String deleteSql = "DELETE FROM user WHERE id=?";
	private String updateSql = "UPDATE user SET (username,password)=(?,?) WHERE id=?";
	
	private PreparedStatement insert;
	private PreparedStatement select;
	private PreparedStatement selectById;
	private PreparedStatement selectByUsername;
	private PreparedStatement selectByPassword;
	private PreparedStatement delete;
	private PreparedStatement update;
	

	private String createUserTable =""
			+ "CREATE TABLE User("
			+ "id bigint GENERATED BY DEFAULT AS IDENTITY,"
			+ "username VARCHAR(20),"
			+ "password VARCHAR(50)"
			+ ")";
	
	
	public HsqlUserRepository(Connection connection){
		this.connection=connection;
		
		try{
			

			insert = connection.prepareStatement(insertSql);
			select = connection.prepareStatement(selectSql);
			selectById = connection.prepareStatement(selectByIdSql);
			selectByUsername = connection.prepareStatement(selectByUsernameSql);
			selectByPassword = connection.prepareStatement(selectByPasswordSql);
			delete = connection.prepareStatement(deleteSql);
			update = connection.prepareStatement(updateSql);
			
			
			ResultSet rs = connection.getMetaData().getTables(null, null, null, null);
			
			boolean tableExists =false;
			while(rs.next())
			{
				if(rs.getString("TABLE_NAME").equalsIgnoreCase("User")){
					tableExists=true;
					break;
				}
			}
			if(!tableExists){
				Statement createTable = connection.createStatement();
				createTable.executeUpdate(createUserTable);
			}
		}catch(SQLException ex){
			ex.printStackTrace();
		}
		
	}
	
	
	public User withId(int id) {
		User result = null;
		try {
			selectById.setInt(1, id);
			ResultSet rs = selectById.executeQuery();
			while(rs.next()){
				User user = new User();
				user.setUsername(rs.getString("username"));
				user.setPassword(rs.getString("password"));
				user.setId(rs.getInt("id"));
				result = user;
				break;
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return result;
	}

	public List<User> allOnPage(PagingInfo page) {
List<User> result = new ArrayList<User>();
		
		try {
			select.setInt(1, page.getCurrentPage()*page.getSize());
			select.setInt(2, page.getSize());
			ResultSet rs = select.executeQuery();
			while(rs.next()){
				User user = new User();
				user.setUsername(rs.getString("username"));
				user.setPassword(rs.getString("password"));
				user.setId(rs.getInt("id"));
				result.add(user);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return result;
	}

	public void add(User user) {
		try {
			insert.setString(1, user.getUsername());
			insert.setString(2, user.getPassword());
			
			insert.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
	}

	public void modify(User u) {
		try {
			update.setString(1, u.getUsername());
			update.setString(2, u.getPassword());
			update.setInt(3, u.getId());
			update.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
	}

	public void remove(User u) {
		try {
			delete.setInt(1, u.getId());
			delete.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
	}

	public List<User> withUsername(String username, PagingInfo page) {
		
		List<User> result = new ArrayList<User>();
		try {
			selectByUsername.setString(1, username);
			selectByUsername.setInt(2, page.getCurrentPage()*page.getSize());
			selectByUsername.setInt(3, page.getSize());
			ResultSet rs = selectByUsername.executeQuery();
			while(rs.next()){
				User user = new User();
				user.setUsername(rs.getString("username"));
				user.setPassword(rs.getString("password"));
				user.setId(rs.getInt("id"));
				result.add(user);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return result;
	}

	public List<User> withPassword(String password, PagingInfo page) {

		List<User> result = new ArrayList<User>();
		try {
			selectByPassword.setString(1, password);
			selectByPassword.setInt(2, page.getCurrentPage()*page.getSize());
			selectByPassword.setInt(3, page.getSize());
			ResultSet rs = selectByPassword.executeQuery();
			while(rs.next()){
				User user = new User();
				user.setUsername(rs.getString("username"));
				user.setPassword(rs.getString("password"));
				user.setId(rs.getInt("id"));
				result.add(user);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return result;
	}


}